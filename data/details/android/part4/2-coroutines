Kotlin coroutines are a concurrency design pattern that can be used on Android to simplify code that executes asynchronously[1]. Coroutines were added to Kotlin in version 1.3 and are based on established concepts from other languages. They help to manage long-running tasks that might otherwise block the main thread and cause your app to become unresponsive[1]. 

To use coroutines in Android Kotlin, you need to add the following dependencies in the app-level build.gradle file:
```
dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:x.x.x"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:x.x.x"
}
```
where `x.x.x` is the version of the coroutine[5].

Here are the basic steps to create a coroutine in Android Kotlin:
1. Create a coroutine scope using `CoroutineScope()`.
2. Launch a new coroutine using `launch()` or `async()`.
3. Inside the coroutine, use suspending functions like `delay()` to pause the coroutine without blocking the underlying thread.
4. When the coroutine is no longer needed, cancel it using `cancel()` [6].

For example, the following code creates a coroutine that prints "Hello" and "World" with a delay of 1 second between them:
```
fun main() {
    runBlocking {
        launch {
            println("Hello")
            delay(1000)
            println("World")
        }
    }
}
```
When you run this code, you will see the following output:
```
Hello
World
```
Note that `runBlocking()` is a coroutine builder that bridges the non-coroutine world of a regular `fun main()` and the code with coroutines inside of `runBlocking { ... }` curly braces[6].

Overall, Kotlin coroutines are a recommended solution for asynchronous programming on Android, as they are lightweight, support many concurrent operations, and help to avoid memory leaks.


Assignments : 
1. [First coroutine](https://invidious.lunar.icu/watch?v=kvfpuzSwVZ8&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=1)
2. [Suspend function](https://invidious.lunar.icu/watch?v=kvfpuzSwVZ8&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=1)
3. [Coroutine Context](https://invidious.lunar.icu/watch?v=71NrkkRNXG4&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=3)
4. [run Blocking](https://invidious.lunar.icu/watch?v=71NrkkRNXG4&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=4)
5. [Jobs, Waiting, Cancelation](https://invidious.lunar.icu/watch?v=71NrkkRNXG4&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=5)
6. [Async and Await](https://invidious.lunar.icu/watch?v=71NrkkRNXG4&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=6)
7. [lifecycleScope and viewModelScope](https://invidious.lunar.icu/watch?v=71NrkkRNXG4&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=7)
8. [Coroutines with Retrofit](https://invidious.lunar.icu/watch?v=S-10lLA0nbk&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=9)
9. [Coroutine Cancellation](https://invidious.lunar.icu/watch?v=VWlwkqmTLHc&list=PLQkwcJG4YTCQcFEPuYGuv54nYai_lwil_&index=10)